#+TITLE: Accounting Receipts Helper

Some logic to simplify monthly reporting of receipts üßæ and invoices üéÅ for accounting.

The monthly dance may typically involve:
1. marking of emails with invoices or receipts,
2. collecting needed assets into a central location,
3. curating the collection by reviewing it for correctness, annotating documents and renaming files
4. compiling the deliverables into a user-friendly package for the accountant (perhap a zip-file) and
5. sending the goods for processing before the final step can ensue:
6. üí∏ +profit+ taxes

Hopefully this package helps reduce a fair amount of toil. üòÖ

* TODO Usage

* Background

** Package Prefix

For convenience (brevity, rather) we're not going to use =accounting-receipts-helper= as a prefix but will use =acct-rcpt= instead.

#+begin_src elisp :noweb-ref custom :noweb-sep "\n\n"
(defgroup acct-rcpt nil
  "Accounting receipt processing helpers"
  :prefix "acct-rcpt-"
  :version "29.0.50")
#+end_src

** Source Files

The logic will be defined in file:acct-rcpt.el and tests will be defined in file:acct-rcpt-test.el. These source files will be produced by tangling this literate program. In Emacs this can be done by calling src_elisp[:results none]{(org-babel-tangle)} to produce all source needed files.

*** Application

The structure of the app is informed by some of the recommendations[fn:1].

#+begin_src elisp :noweb yes :tangle acct-rcpt.el
;;; acct-rcpt.el --- accounting receipts helper      -*- lexical-binding: t; -*-

;; Copyright (C) 2021  David Asabina

;; Author: David Asabina <david@asabina.de>
;; Keywords: lisp
;; Version: 0.0.1

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Helpers to aid in handling of monthly accounting duties

;;; Code:

<<custom>>

<<app>>

(provide 'acct-rcpt)
;;; acct-rcpt.el ends here
#+end_src

*** Tests

For testing, the ERT package is utilized and the source file is loaded prior to the definition of all of our test cases.

#+begin_src elisp :noweb yes :tangle acct-rcpt-test.el
(require 'ert)

(load-file "acct-rcpt.el")

<<test>>
#+end_src

**** TODO Test Runner

see [[https://www.gnu.org/software/emacs/manual/html_node/ert/Running-Tests-in-Batch-Mode.html][Running Tests in Batch Mode (Emacs Manual)]]

#+begin_src shell :results none
emacs -batch -l ert -l acct-rcpt-test.el \
      --eval "(let ((ert-quiet t)) (ert-run-tests-batch-and-exit))"
#+end_src

* TODO [50%] Contexts

In order to keep accounting affairs neatly isolated, one can define different accounting contexts. A context can be unique to an organization, a department or a project. This design decision is wholly yours as long as you try to keep directories unique to a single context.

#+begin_src elisp :noweb-ref custom
(defcustom acct-rcpt-contexts '()
  "Accounting contexts"
  :type 'sexp
  :group 'acct-rcpt)
#+end_src

** DONE Define Contexts

In order to represent contexts, [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html][alists (association lists)]] will be utilized since they provide a clear structure for key-value pairs, i.e.: the cons cell, where lists or plists may be insufficiently constrained. A context is therefore represented as a cons cell consisting of the context name and the context configuration data which itself is a list of cons cells of configuration keys and configuration values.

The =acct-rcpt-contexts= custom variable will simply contain a list of these /context/ cons cells. The following snippet demonstrates a valid contexts data structure:

#+NAME: example-contexts
#+begin_src elisp :results none
'(("Acme Corp" .
   ((:base-directory . "/tmp/fin/Acme Corp")))
  ("Muster GmbH" .
   ((:base-directory . "/tmp/fin/Muster GmbH")))
  ("Voorbeeld BV" .
   ((:base-directory . "/tmp/blah/voorbeeld-bv"))))
#+end_src

*** Validating Contexts

Some validation helpers are defined in order to facilitate health-checking of the structure of contexts prior to attempts to conduct any work based on these inputs.

#+NAME: contexts-validator
#+begin_src elisp :results none :noweb yes :noweb-ref app
<<context-validator>>

(defun acct-rcpt--valid-contexts (contexts)
  (cond ((not (and (listp contexts) (cl-every 'consp contexts)))
         (cons nil (format "Contexts %S not a valid alist" contexts)))
        ((= 0 (length contexts))
         (cons nil (format "Contexts %S of zero length" contexts)))
        ((let* ((cs (cl-map 'list 'acct-rcpt--valid-context contexts))
                (keys (cl-map 'list 'car cs))
                (vals (cl-map 'list 'cdr cs)))
           (when (seq-contains-p keys nil)
             (cons nil vals))))
        (t (cons contexts nil))))
#+end_src

During testing, checks are conducted on empty lists and non-list inputs in order to verify that the *valid contexts* (plural) helper behaves as expected. As the *valid context* (singular) helper is called to check every individual context more detailed context-level tests will be constrained to this this helper.

#+begin_src elisp :results none :noweb yes :noweb-ref test
<<context-validator-test>>

(ert-deftest acct-rcpt--valid-contexts ()
  ;; invalid contexts, check that car (key) is nil
  (should (eq nil (car (acct-rcpt--valid-contexts '()))))
  (should (eq nil (car (acct-rcpt--valid-contexts (list "accounting" "is" "not" "fun")))))
  (should (eq nil (car (acct-rcpt--valid-contexts 12))))
  ;; valid contexts, check that cdr (datum) is nil
  (should (eq nil (cdr
                   (acct-rcpt--valid-contexts
                    <<example-contexts>>)))))
#+end_src

**** Validating a single Context

As previously mentioned, a /context/ is an alist consisting of:
1. the label of the context as a string
2. the configuration of a context as an alist composed of cons cells with the following keys:
   - =:base-directory= a string containing a path to the directory of the context

In order to validate a context, the *valid context* helper accepts a /context/ and returns a cons cell that is of the following form:
1. ~(CONTEXT . nil)~, upon a valid context where
   - =CONTEXT= is the input context, simply passed-through
2. ~(nil . ERROR)~ when the input is invalid where
   - =ERROR= is a single string or a list of strings indicating why the input is invalid

The *valid context* helper checks the label and the configuration through the *valid context label* and *valid context config* helpers.

#+NAME: context-validator
#+begin_src elisp :noweb yes :results none
<<context-label-validator>>

<<context-config-validator>>

(defun acct-rcpt--valid-context (context)
  (cond ((not (consp context))
         (cons nil (format "Context %S not a cons cell" context)))
        ((let ((label (acct-rcpt--valid-context-label (car context)))
               (data (acct-rcpt--valid-context-config (cdr context))))
           (cons (when (and (car label) (car data)) context)
                 (seq-filter (lambda (x)
                               (not (eq nil x)))
                             (list (cdr label) (cdr data))))))
        (t (cons context nil))))
#+end_src

For simplificies sake, the tests are constrained to verifying the nil-ness of the context and error positions of the returned cons cell in a select few scenarios that have been selected based on the logic implemented in the previously listed function. A broader sweep of testing scenarios are conducted at the level of the more specialized validation functions.

#+NAME: context-validator-test
#+begin_src elisp :results none :noweb yes
<<context-label-validator-test>>

<<context-config-validator-test>>

(ert-deftest acct-rcpt--valid-context ()
  ;; valid input
  (should (not (eq nil (car (acct-rcpt--valid-context (car
                                                       <<example-contexts>>))))))
  (should (eq nil (cdr (acct-rcpt--valid-context (car
                                                  <<example-contexts>>)))))

  ;; invalid input
  (should (not (eq nil (cdr (acct-rcpt--valid-context '())))))
  (should (eq nil (car (acct-rcpt--valid-context '()))))

  (should (not (eq nil (cdr (acct-rcpt--valid-context 12)))))
  (should (eq nil (car (acct-rcpt--valid-context 12)))))
#+end_src

***** Validating a Context Label

In order to validate context labels, the *valid context label* function return a 2-element list containing a valid label or =nil= as its first element and an optional string indicating the grounds on which validation failed after verifying that:
1. input is a string
2. trimmed string, i.e.: with leading and trailing whitespace removed, is of a nonzero length

The *valid context label* helper returns a cons cell of a string value and an error message and is of the following form:
- ~(nil . ERROR)~, when the input was invalid where =ERROR= is a string detailing the problem
- ~(STRING . nil)~, when the input was valid and =STRING= is the cleaned-up version of the input for further use.

#+NAME: context-label-validator
#+begin_src elisp :results none
(defun acct-rcpt--valid-context-label (label)
  (cond ((not (stringp label))
         (cons nil (format "Label %S is not a string" label)))
        ((= (length (string-clean-whitespace label)) 0)
         (cons nil (format "Stripped label %S is not of nonzero length" label)))
        (t
         (cons (string-clean-whitespace label) nil))))
#+end_src

The tests confirm that typechecking (.e.g.: input is of type string) and whitespace trimming work as expected.

#+NAME: context-label-validator-test
#+begin_src elisp :results none
(ert-deftest acct-rcpt--valid-context-label ()
;; make more robust by testing car and cdr
  (should (equal nil (car (acct-rcpt--valid-context-label 'two))))
  (should (equal nil (car (acct-rcpt--valid-context-label 12))))
  (should (equal nil (car (acct-rcpt--valid-context-label t))))
  (should (equal nil (car (acct-rcpt--valid-context-label " "))))
  (should (equal "Info" (car (acct-rcpt--valid-context-label "Info "))))
  (should (equal "$-sign" (car (acct-rcpt--valid-context-label "$-sign"))))
  (should (equal "Hi-Tech Corp" (car (acct-rcpt--valid-context-label "  Hi-Tech Corp  "))))
  (should (equal "H√º√ß√∏ Co" (car (acct-rcpt--valid-context-label "H√º√ß√∏ Co")))))
#+end_src

***** Validating a Context Configuration

In order to validate a context configuration, we define a *valid context config* function to return a 2-element list containing a valid context data alist or =nil= as its first element and an optional string indicating the grounds on which validation failed after verifying that:
1. input is an alist (association list)
2. input alist has the =:base-directory= key with a /string/ value

The *valid context data* helper returns a cons cell of a string value and an error message and is of the following form:
- ~(nil . ERROR)~, when the input was invalid where =ERROR= is a string detailing the problem
- ~(STRING . nil)~, when the input was valid and =STRING= is the cleaned-up version of the input for further use.

#+NAME: context-config-validator
#+begin_src elisp :results none
(defun acct-rcpt--valid-context-config (data)
  (cond ((not (and (listp data) (cl-every 'consp data)))
         (cons nil (format "Context data %S is not a valid alist" data)))
        ((not (stringp (alist-get :base-directory data)))
         (cons nil (format "Context data %S lacks :base-directory key with a string value" data)))
        (t
         (cons data nil))))
#+end_src

The tests confirm that "typechecking" (i.e.: input is an alist) and schema validation (structure) work as expected. As in the [[*Context Label Validation][label validation helper]], we define an =agree= helper to verify agreement between an expected value and the output of the *valid context label* helper.

#+NAME: context-config-validator-test
#+begin_src elisp :results none
(ert-deftest acct-rcpt--valid-context-config ()
  (let ((dummy '((:base-directory . "/tmp/nice"))))
    (should (equal nil (car (acct-rcpt--valid-context-config " "))))
    (should (equal nil (car (acct-rcpt--valid-context-config '()))))
    (should (equal nil (car (acct-rcpt--valid-context-config '(:base-directory)))))
    (should (equal nil (car (acct-rcpt--valid-context-config '(:base-directory . "")))))
    (should (equal nil (car (acct-rcpt--valid-context-config '(:base-directory "hi")))))
    (should (equal nil (car (acct-rcpt--valid-context-config '((:base-directory "/tmp/nice"))))))
    (should (equal dummy (car (acct-rcpt--valid-context-config dummy))))
    (should (equal nil (car (acct-rcpt--valid-context-config '((:base-directory . :path))))))
    (should (equal nil (car (acct-rcpt--valid-context-config '((:base-directory))))))))
#+end_src

** TODO Select Context

Use completion or some menu-like interface to prompt the user for the context and enable the selected context.

* TODO [0%] Directory

In order to simplify work for accounting it may be necessary to formulate a clear directory structure for every accounting period. This can be achieved by defining a reference folder which is to be copied over as a reference or baseline for every new accounting period. Additionally, it may be necessary to define some operations to be performed on top of baseline directory structure.

** TODO Create period directory from reference directory

** TODO Allow for custom logic to modify /new accounting period/ directory

* TODO [0%] Receipts and Invoices

** TODO Read transactions from a spreadsheet

* TODO [0%] Review

** TODO Check completeness

Based on the accounting spreadsheet, verify that all documents exist.

* TODO [0%] Report accounting period

** To simplify communication with the accounting folks, a report file is needed that is easy to read and where associated attachments are easy to open.

** TODO Compose reporting package

Write report for the given accounting period with all attachments included to a temporary directory.

** TODO Compose reporting e-mail from template

Create reporting e-mail from a template and attach reporting package to said email.

* TODO Figure out whether autoloads are useful

* Footnotes

[fn:1] https://www.emacswiki.org/emacs/MakingPackages
